@using OpenShock.Desktop.ModuleBase
@using OpenShock.Desktop.ModuleBase.Config
@using OpenShock.Desktop.Modules.Medal.Config

<MudPaper Outlined="true" Class="rounded-lg mud-paper-padding-margin">
    <MudText>Medal.TV ICYMI (Automatic bookmarking and clip capture)</MudText>
    <MudDivider/>

    <MudCheckBox Class="option-width option-checkbox-height" @bind-Value="ModuleConfig.Config.Enabled"
                 Label="ICYMI Enabled" @bind-Value:after="OnSettingsValueChange"/>
    
    <div style="display: flex; width: 600px; padding-top: 20px;">
        <MudTextField Class="option-width" Variant="Variant.Filled" @bind-Value="ModuleConfig.Config.Name"
                      Label="Clip Name" @bind-Value:after="OnSettingsValueChange"/>
        <MudTextField Class="option-width" Variant="Variant.Filled"
                      @bind-Value="ModuleConfig.Config.Description" Label="Clip Description"
                      @bind-Value:after="OnSettingsValueChange"/>
        <MudTextField Class="option-width" Variant="Variant.Filled"
                      @bind-Value="ModuleConfig.Config.ClipDuration" Label="Clip Duration (sec)"
                      @bind-Value:after="OnSettingsValueChange"/>
    </div>

    <div style="display: flex; width: 600px; padding-top: 20px;">
        <MudSelect Class="option-width" Dense="true" Variant="Variant.Filled"
                   @bind-Value="ModuleConfig.Config.TriggerAction" Label="Capture Type"
                   @bind-Value:after="OnSettingsValueChange">
            @foreach (IcymiTriggerAction triggerAction in Enum.GetValues(typeof(IcymiTriggerAction)))
            {
                <MudSelectItem Value="@triggerAction">@triggerAction</MudSelectItem>
            }
        </MudSelect>
        
        <MudSelect Class="option-width" Dense="true" Variant="Variant.Filled"
                   @bind-Value="ModuleConfig.Config.AlertType" Label="Alert Type"
                   @bind-Value:after="OnSettingsValueChange">
            @foreach (IcymiAlertType alertType in Enum.GetValues(typeof(IcymiAlertType)))
            {
                <MudSelectItem Value="@alertType">@alertType</MudSelectItem>
            }
        </MudSelect>
    </div>
    <div style="width: 600px; padding-top: 20px;">
        <MudText>Target Game (changing requires restart)</MudText>
        <MudDivider/>
        <MudSelect Class="option-width" Dense="true" Variant="Variant.Filled"
                   @bind-Value="ModuleConfig.Config.Game" Label="Record for"
                   @bind-Value:after="OnSettingsValueChange">
            @foreach (IcymiGame icymiGame in Enum.GetValues(typeof(IcymiGame)))
            {
                <MudSelectItem Value="@icymiGame">@icymiGame</MudSelectItem>
            }
        </MudSelect>
    </div>
</MudPaper>

@code {

    [ModuleInject] private IModuleConfig<MedalIcymiConfig> ModuleConfig { get; set; } = null!;

    
    private void OnSettingsValueChange()
    {
        ModuleConfig.SaveDeferred();
    }
}