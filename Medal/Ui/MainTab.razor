@using System.Globalization
@using Microsoft.Extensions.Logging
@using OpenShock.Desktop.ModuleBase
@using OpenShock.Desktop.ModuleBase.Config
@using OpenShock.Desktop.ModuleBase.Models
@using OpenShock.Desktop.Modules.Medal.Config
@using OpenShock.Desktop.Modules.Medal.Services.MedalApi
@inject ILogger<MainTab> Logger
@inject ISnackbar Snackbar

<MudPaper Outlined="true" Class="settings-wrap">

    <!-- Title -->
    <MudText Typo="Typo.h6" Class="mb-2">Medal.TV ICYMI (Automatic bookmarking and clip capture)</MudText>
    <MudDivider Class="mb-4" />

    <!-- GENERAL -->
    <MudPaper Class="card" Outlined="true">
        <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween" Class="mb-3">
            <MudText Typo="Typo.h6">General</MudText>
            <MudSwitch @bind-Value="ModuleConfig.Config.Enabled"
                       @bind-Value:after="OnSettingsValueChange"
                       Color="Color.Primary"
                       Label="ICYMI Enabled" />
        </MudStack>

        <MudGrid Spacing="2">
            <MudItem xs="12" md="4">
                <MudTextField Variant="Variant.Outlined" Margin="Margin.Dense"
                              @bind-Value="ModuleConfig.Config.Name"
                              @bind-Value:after="OnSettingsValueChange"
                              Label="Clip Name" />
            </MudItem>
            <MudItem xs="12" md="5">
                <MudTextField Variant="Variant.Outlined"  Margin="Margin.Dense"
                              @bind-Value="ModuleConfig.Config.Description"
                              @bind-Value:after="OnSettingsValueChange"
                              Label="Clip Description" />
            </MudItem>
            <MudItem xs="12" md="3">
                <MudTextField Variant="Variant.Outlined" Margin="Margin.Dense"
                              @bind-Value="ModuleConfig.Config.ClipDuration"
                              @bind-Value:after="OnSettingsValueChange"
                              Label="Clip Duration (sec)" />
            </MudItem>
        </MudGrid>
        
        <MudGrid Spacing="2">
            <MudItem xs="12" md="6">
                <MudSelect Dense="true" Variant="Variant.Outlined"  Margin="Margin.Dense"
                           @bind-Value="ModuleConfig.Config.TriggerAction"
                           @bind-Value:after="OnSettingsValueChange"
                           Label="Capture Type">
                    @foreach (IcymiTriggerAction triggerAction in Enum.GetValues(typeof(IcymiTriggerAction)))
                    {
                        <MudSelectItem Value="@triggerAction">@triggerAction</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="12" md="6">
                <MudSelect Dense="true" Variant="Variant.Outlined" Margin="Margin.Dense"
                           @bind-Value="ModuleConfig.Config.AlertType"
                           @bind-Value:after="OnSettingsValueChange"
                           Label="Alert Type">
                    @foreach (IcymiAlertType alertType in Enum.GetValues(typeof(IcymiAlertType)))
                    {
                        <MudSelectItem Value="@alertType">@alertType</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
        </MudGrid>
    </MudPaper>

    <!-- TIMING -->
    <MudPaper Class="card" Outlined="true">
        <MudText Typo="Typo.h6" Class="mb-2">Timing</MudText>

        <MudGrid Spacing="2">
            <MudItem xs="12" md="5">
                <MudSwitch @bind-Value="ModuleConfig.Config.IncludeDurationInDelay"
                           @bind-Value:after="OnSettingsValueChange"
                           Color="Color.Primary">
                    Include Command Duration
                </MudSwitch>
            </MudItem>
            <MudItem xs="12" md="7">
                <DebouncedSlider T="double"
                                 Size="Size.Medium"
                                 @bind-SliderValue="TriggerDelay"
                                 OnSaveAction="_ => OnSettingsValueChange()"
                                 Min="0" Max="30" Step="0.1" Style="margin-top: -29px">
                        Trigger Delay: @(ModuleConfig.Config.TriggerDelay.TotalSeconds.ToString(CultureInfo.InvariantCulture))s
                </DebouncedSlider>
            </MudItem>
        </MudGrid>
    </MudPaper>

    <!-- ORIGINS + CONTROL TYPES -->
    <MudGrid Spacing="2" Class="equal-row" Style="margin-bottom: 12px;">
        <MudItem xs="12" md="6" Class="equal-col">
            <MudPaper Class="card equal-card" Outlined="true">
                <MudText Typo="Typo.h6" Class="mb-2">Command Origins</MudText>
                <MudStack Row="true" Spacing="2">
                    <MudSwitch @bind-Value="ModuleConfig.Config.Local"  @bind-Value:after="OnSettingsValueChange" Color="Color.Primary">Local</MudSwitch>
                    <MudSwitch @bind-Value="ModuleConfig.Config.Remote" @bind-Value:after="OnSettingsValueChange" Color="Color.Primary">Remote</MudSwitch>
                </MudStack>
            </MudPaper>
        </MudItem>

        <MudItem xs="12" md="6" Class="equal-col">
            <MudPaper Class="card equal-card" Outlined="true">
                <MudText Typo="Typo.h6" Class="mb-2">Control Types</MudText>
                <MudStack Row="true" Spacing="2" Wrap="Wrap.Wrap">
                    @foreach (ControlType controlType in Enum.GetValues(typeof(ControlType)))
                    {
                        <ControlTypeSwitch ControlType="@controlType" />
                    }
                </MudStack>
            </MudPaper>
        </MudItem>
    </MudGrid>

    <!-- TARGET GAME -->
    <MudPaper Class="card" Outlined="true">
        <MudText Typo="Typo.h6" Class="mb-2">Target Game</MudText>
        <MudSelect Dense="true" Variant="Variant.Outlined" Margin="Margin.Dense"
                   Class="w-100"
                   @bind-Value="ModuleConfig.Config.Game"
                   @bind-Value:after="OnSettingsValueChange"
                   Label="Record for">
            @foreach (var icymiGame in ModuleConfig.Config.GameKeys.Keys)
            {
                <MudSelectItem Value="@icymiGame">@icymiGame</MudSelectItem>
            }
        </MudSelect>
    </MudPaper>

    <!-- AVAILABLE GAMES -->
    <MudPaper Class="card" Outlined="true">
        <MudText Typo="Typo.h6" Class="mb-2">Available Games</MudText>

        <MudTable Dense="true" Hover="true" Class="mb-4" Items="ModuleConfig.Config.GameKeys" Elevation="0">
            <HeaderContent>
                <MudTh>Game</MudTh>
                <MudTh class="col-key">Public API Key</MudTh>
                <MudTh class="col-actions"></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Game">@context.Key</MudTd>
                <MudTd DataLabel="Public API Key">@context.Value</MudTd>
                <MudTd>
                    <MudIconButton Size="Size.Small"
                                   OnClick="() => RemoveGameKey(context.Key)"
                                   Icon="@Icons.Material.Filled.RemoveCircleOutline" />
                </MudTd>
            </RowTemplate>
        </MudTable>

        <!-- Add new game -->
        <MudStack Spacing="2">
            @if (!_addingNew)
            {
                <MudButton OnClick="AddNewClick" Variant="Variant.Outlined" Color="Color.Primary">
                    Add New Game
                </MudButton>
            }
            else
            {
                @if (_addingNewLoading)
                {
                    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                }
                else
                {
                    <MudStack Row="true" Spacing="2" AlignItems="AlignItems.Center">
                        <MudButton OnClick="() => _addingNew = false" Variant="Variant.Outlined" Color="Color.Default">
                            Cancel
                        </MudButton>
                        <MudTextField @bind-Value="_searchText" Variant="Variant.Outlined" Margin="Margin.Dense"
                                      DebounceInterval="100"
                                      Placeholder="Search for game"
                                      Class="flex-1" />
                    </MudStack>

                    <MudTable Items="GameList"  Dense="true" Hover="true" Height="350px" Breakpoint="Breakpoint.Sm" HorizontalScrollbar="true">
                        <HeaderContent>
                            <MudTh>Game</MudTh>
                            <MudTh class="col-actions"></MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="Game">@context.CategoryName</MudTd>
                            <MudTd>
                                <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="() => AddGame(context)" Size="Size.Small">Add</MudButton>
                            </MudTd>
                        </RowTemplate>
                    </MudTable>
                }
            }
        </MudStack>
    </MudPaper>

</MudPaper>

<style>
    .equal-row .equal-col { display: flex; }
    .equal-row .equal-col .equal-card { flex: 1 1 auto; height: 100%; }
    
    .settings-wrap {
        max-width: 920px;
        margin: 0 auto;
        padding: 16px;
        border-radius: 12px;
    }

    .card {
        padding: 16px;
        border-radius: 12px;
        margin-bottom: 12px;
    }
    
    .col-key { width: 420px; }
    .col-actions { width: 1%; white-space: nowrap; }

    .flex-1 { width: 100%; }

</style>

@code {
    private const string MedalAppUrl = "https://openshock.org";

    [ModuleInject] private IModuleConfig<MedalIcymiConfig> ModuleConfig { get; set; } = null!;
    [ModuleInject] private IMedalApiService MedalApiService { get; set; } = null!;

    private bool _addingNew = false;
    private bool _addingNewLoading = false;
    private string _searchText = string.Empty;
    private IReadOnlyList<CategoryItem> _categories = [];

    public double TriggerDelay
    {
        get => ModuleConfig.Config.TriggerDelay.TotalSeconds;
        set => ModuleConfig.Config.TriggerDelay = TimeSpan.FromSeconds(value);
    }

    private IEnumerable<CategoryItem> GameList => _searchText.Length >= 3
        ? _categories.Where(x => x.CategoryName.Contains(_searchText, StringComparison.InvariantCultureIgnoreCase))
        : [];

    private void OnSettingsValueChange() => ModuleConfig.SaveDeferred();

    private async Task RemoveGameKey(string game)
    {
        ModuleConfig.Config.GameKeys.Remove(game);
        await ModuleConfig.Save();
    }

    private void AddNewClick(MouseEventArgs _)
    {
        _categories = [];
        _addingNewLoading = false;
        _addingNew = true;

        Task.Run(async () =>
            {
                _addingNewLoading = true;
                _categories = await MedalApiService.GetCategoriesAsync();
                Logger.LogDebug("Fetched {count} categories from Medal API.", _categories.Count);
                _addingNewLoading = false;
                await InvokeAsync(StateHasChanged);
            })
            .ContinueWith(task =>
            {
                if (task.IsFaulted)
                {
                    Logger.LogError(task.Exception, "Error fetching categories");
                    Snackbar.Add("Error fetching categories", Severity.Error);
                }
            }, TaskContinuationOptions.OnlyOnFaulted);
    }

    private void AddGame(CategoryItem category)
    {
        Task.Run(() => AddGameTask(category))
            .ContinueWith(task =>
            {
                if (task.IsFaulted)
                {
                    Logger.LogError(task.Exception, "Error registering app");
                    Snackbar.Add("Error registering app", Severity.Error);
                }
            }, TaskContinuationOptions.OnlyOnFaulted);
    }

    private async Task AddGameTask(CategoryItem category)
    {
        _addingNewLoading = true;
        await InvokeAsync(StateHasChanged);
        var registerRequest = await MedalApiService.RegisterAppAsync("OpenShock Desktop", MedalAppUrl, category.CategoryId);
        ModuleConfig.Config.GameKeys[category.CategoryName] = registerRequest;
        _addingNew = false;
        await InvokeAsync(StateHasChanged);
    }
}
